{
  "hash": "ffd0e782e3e5cb2386c826de1a70fd23",
  "result": {
    "markdown": "---\ntitle: Gradio NLP Apps\ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: Gradio Tutorial 1\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# NLP apps with a simple Gradio interface  \n\n\n# Setup\n\n## Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport gradio as gr\nfrom transformers import pipeline\nimport os\nimport io\nfrom IPython.display import Image, display, HTML\nfrom PIL import Image\nimport base64\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())  # read local .env file\n\nhf_api_key = os.environ['HF_API_KEY']  # HuggingFace API\n```\n:::\n\n\n# Text Summarization App\n\nBuilding a text summarization app\n\n## Text summarization\n\n- To learn more about text summarization, take a look at [this tutorial](https://kirenz.github.io/huggingface/text-summarization/summarization-pipeline#/title-slide)\n\n\n## Helper function: summarization pipeline\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nget_completion = pipeline(\n    \"summarization\", model=\"sshleifer/distilbart-cnn-12-6\")\n\n```\n:::\n\n\n## API-version {.smaller}\n\n- The code would look very similar if you were running it from an API instead of locally. \n\n- The same is true for all the tutorials in the rest of the course, make sure to check the [Pipelines](https://huggingface.co/docs/transformers/main_classes/pipelines) documentation page\n\n## API code (optional)\n\n- In our example: to run it via API, you could use an [Inference Endpoint](https://huggingface.co/inference-endpoints) for the `sshleifer/distilbart-cnn-12-6`, a 306M parameter distilled model from `facebook/bart-large-cnn`. \n\n. . .\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# # Helper function\n# import requests, json\n\n\n# #Summarization endpoint\n# def get_completion(inputs, parameters=None,ENDPOINT_URL=os.environ['HF_API_SUMMARY_BASE']):\n#     headers = {\n#       \"Authorization\": f\"Bearer {hf_api_key}\",\n#       \"Content-Type\": \"application/json\"\n#     }\n#     data = { \"inputs\": inputs }\n#     if parameters is not None:\n#         data.update({\"parameters\": parameters})\n#     response = requests.request(\"POST\",\n#                                 ENDPOINT_URL, headers=headers,\n#                                 data=json.dumps(data)\n#                                )\n#     return json.loads(response.content.decode(\"utf-8\"))\n```\n:::\n\n\n## Text to summarize {.smaller}\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntext = ('''One of the best ways to share your machine learning model, API, or data science workflow with others is to create an interactive app that allows your users or colleagues to try out the demo in their browsers. Gradio allows you to build demos and share them, all in Python. And usually in just a few lines of code! Note that we shorten the imported name gradio to gr for better readability of code using Gradio. This is a widely adopted convention that you should follow so that anyone working with your code can easily understand it. You’ll also notice that in order to make apps, we create a gr.Interface. This Interface class can wrap any Python function with a user interface. The core Interface class is initialized with three required parameters: fn: the function to wrap a UI around; inputs: which component(s) to use for the input (e.g. \"text\", \"image\" or \"audio\"); outputs: which component(s) to use for the output (e.g. \"text\", \"image\" or \"label\") ''')\n```\n:::\n\n\n## Summarization example {.smaller}\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef summarize(input):\n    output = get_completion(input)\n    return output[0]['summary_text']\n\n\nsummarize(text)\n```\n:::\n\n\n- ' Gradio allows you to build demos and share them in just a few lines of code . The core Interface class is initialized with three required parameters: fn: the function to wrap a UI around; inputs: which component(s) to use for the input (e.g. \"text\", \"image\" or \"audio) or \"label\")'\n\n## Gradio app code {.smaller}\n\n- Getting started with Gradio `gr.Interface` \n- If you want to use the API-version, replace `demo.launch(share=False)` with `demo.launch(share=True, server_port=int(os.environ['PORT1']))`\n\n. . .\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Helper function\n\n\ndef summarize(input):\n    output = get_completion(input)\n    return output[0]['summary_text']\n\n\n# Close all current apps\ngr.close_all()\n\n# Start of the app\ndemo = gr.Interface(\n    fn=summarize,\n    inputs=\"text\",\n    outputs=\"text\",\n    examples=[\"One of the best ways to share your machine learning model, API, or data science workflow with others is to create an interactive app that allows your users or colleagues to try out the demo in their browsers. Gradio allows you to build demos and share them, all in Python. And usually in just a few lines of code! Note that we shorten the imported name gradio to gr for better readability of code using Gradio. This is a widely adopted convention that you should follow so that anyone working with your code can easily understand it. You’ll also notice that in order to make apps, we create a gr.Interface. This Interface class can wrap any Python function with a user interface\"]\n)\n\ndemo.launch(share=False)\n```\n:::\n\n\n## Gradio interface\n\n![](/images/gradio_app_1.png)\n\n\n## Gradio with text input\n\n![](/images/gradio_app_2.png)\n\n\n\n## Gradio with output\n\n![](/images/gradio_app_3.png)\n\n\n## Extended Gradio app code {.smaller}\n\n- We include more text in the user interface\n- `demo.launch(share=True)` creates a public link to share the app.\n\n. . . \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndef summarize(input):\n    output = get_completion(input)\n    return output[0]['summary_text']\n\n\ngr.close_all()\ndemo = gr.Interface(fn=summarize,\n                    inputs=[gr.Textbox(label=\"Text to summarize\", lines=6)],\n                    outputs=[gr.Textbox(label=\"Result\", lines=3)],\n                    title=\"Text summarization with distilbart-cnn\",\n                    description=\"Summarize any text using the `sshleifer/distilbart-cnn-12-6` model under the hood!\"\n                    )\n\ndemo.launch(share=True)\n\n# API-Version\n# demo.launch(share=True, server_port=int(os.environ['PORT2']))\n```\n:::\n\n\n## Extended Gradio output\n\n![](/images/gradio_app_4.png)\n\n\n# Named Entity Recognition App\n\nBuilding a Named Entity Recognition app\n\n## What is entity recognition?\n\n- Named entity recognition (NER): Find the entities (such as persons, locations, or organizations) in a sentence. \n\n- This can be formulated as attributing a label to each token by having one class per entity and one class for “no entity.”\n\n## Helper function: Named entity recognition pipeline\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nget_completion = pipeline(\"ner\", model=\"dslim/bert-base-NER\")\n\n```\n:::\n\n\n## API-Version\n\n- If you want to use the [Inference Endpoint](https://huggingface.co/inference-endpoints) for `dslim/bert-base-NER`, a 108M parameter fine-tuned BART model on the NER task:\n\n. . .\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# API_URL = os.environ['HF_API_NER_BASE'] #NER endpoint\n# get_completion(text, parameters=None, ENDPOINT_URL= API_URL)\n\n# API-Version\n# def ner(input):\n#     output = get_completion(input, parameters=None, ENDPOINT_URL=API_URL)\n#     return {\"text\": input, \"entities\": output}\n```\n:::\n\n\n## Gradio NER App {.smaller}\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndef ner(input):\n    output = get_completion(input)\n    return {\"text\": input, \"entities\": output}\n\n\ngr.close_all()\n\ndemo = gr.Interface(fn=ner,\n                    inputs=[gr.Textbox(\n                        label=\"Text to find entities\", lines=2)],\n                    outputs=[gr.HighlightedText(label=\"Text with entities\")],\n                    title=\"NER with dslim/bert-base-NER\",\n                    description=\"Find entities using the `dslim/bert-base-NER` model under the hood!\",\n                    allow_flagging=\"never\",\n                    # Here we introduce a new tag, examples, easy to use examples for your application\n                    examples=[\"My name is Jan, I'm a professor at HdM Stuttgart and I live in Stuttgart\", \"My name is Lina and I study at HdM Stuttgart\"])\n\ndemo.launch(share=True)\n\n# API-Version\n# demo.launch(share=True, server_port=int(os.environ['PORT3']))\n```\n:::\n\n\n## App interface\n\n![](/images/gradio_app_5.png)\n\n## App with output\n\n![](/images/gradio_app_6.png)\n\n\n\n## Gradio NER app with merged tokens\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndef merge_tokens(tokens):\n    merged_tokens = []\n    for token in tokens:\n        if merged_tokens and token['entity'].startswith('I-') and merged_tokens[-1]['entity'].endswith(token['entity'][2:]):\n            # If current token continues the entity of the last one, merge them\n            last_token = merged_tokens[-1]\n            last_token['word'] += token['word'].replace('##', '')\n            last_token['end'] = token['end']\n            last_token['score'] = (last_token['score'] + token['score']) / 2\n        else:\n            # Otherwise, add the token to the list\n            merged_tokens.append(token)\n\n    return merged_tokens\n\n\ndef ner(input):\n    output = get_completion(input)\n    merged_tokens = merge_tokens(output)\n    return {\"text\": input, \"entities\": merged_tokens}\n\n\ngr.close_all()\ndemo = gr.Interface(fn=ner,\n                    inputs=[gr.Textbox(\n                        label=\"Text to find entities\", lines=2)],\n                    outputs=[gr.HighlightedText(label=\"Text with entities\")],\n                    title=\"NER with dslim/bert-base-NER\",\n                    description=\"Find entities using the `dslim/bert-base-NER` model under the hood!\",\n                    allow_flagging=\"never\",\n                    examples=[\"My name is Jan, I'm a professor at HdM Stuttgart and I live in Stuttgart\", \"My name is Lina, I live in Stuttgart and study at HdM Stuttgart\"])\n\ndemo.launch(share=True)\n\n# API-Version\n# demo.launch(share=True, server_port=int(os.environ['PORT4']))\n```\n:::\n\n\n## Gradio output\n\n![](/images/gradio_app_7.png)\n\n## Close all apps\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ngr.close_all()\n```\n:::\n\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n**Congratulations! You have completed this tutorial** 👍\n\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-llm-gradio/)**\n\n",
    "supporting": [
      "1_nlp_apps_files"
    ],
    "filters": [],
    "includes": {}
  }
}